!function(){const t=document.querySelector(".todo"),e=t.querySelector(".date-title"),s=t.querySelector(".status-title"),n=t.querySelector(".add-btn"),o=t.querySelector(".clear-done-tasks"),a=t.querySelector(".tasks-container"),i=t.querySelector(".list-tasks-incompleted"),r=t.querySelector(".list-tasks-completed");t.querySelector(".task-title, .task-сategory");let l=[],c=[];function d(){const t=document.querySelectorAll(".list-tasks-completed .task"),e=document.querySelectorAll(".list-tasks-incompleted .task");s.textContent=`${e.length} incomplete, ${t.length} completed`}function u(t){const e=`\n      <div id="${t.id}" class="task mt-4 flex items-start first:mt-0">\n        <div class="task-checkbox mt-0.5 flex h-6 w-6 cursor-pointer items-center justify-center rounded-md border-2 border-gray-200">\n          <svg class="pointer-events-none opacity-0" width="10" height="10" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">\n            <path d="M1 6L3.91667 9L9 1" stroke="#575767" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />\n          </svg>\n        </div>\n        <div class="task-deskription ml-4 flex w-full flex-col">\n          <input value="${t.title}" placeholder="Task" data-deskription="title" class="task-title bg-transparent text-lg font-medium text-[#575767] focus-visible:outline-none" />\n          <input value="${t.category}" placeholder="Category" data-deskription="category" class="task-сategory mt-1 bg-transparent font-semibold text-[#B9B9BE] focus-visible:outline-none" />\n        </div>\n      </div>\n    `;console.log(t.status),"done"===t.status?r.insertAdjacentHTML("afterbegin",e):i.insertAdjacentHTML("afterbegin",e);const s=a.querySelector(`[id="${t.id}"]`);s.querySelectorAll("input[data-deskription]").forEach((t=>{t.addEventListener("input",k)})),"done"===t.status&&g(s)}function g(t){const e=t.querySelector(".task-deskription"),s=t.querySelector(".task-checkbox svg");t.classList.toggle("task-done"),s.classList.toggle("opacity-0"),e.classList.toggle("opacity-50"),e.classList.toggle("pointer-events-none")}function k(){const t=this.closest(".task").id,e=l.findIndex((e=>e.id===Number(t))),s=this.dataset.deskription;l[e][s]=this.value,f()}function f(){localStorage.setItem("tasks",JSON.stringify(l)),localStorage.setItem("tasksDone",JSON.stringify(c))}localStorage.getItem("tasks")&&(l=JSON.parse(localStorage.getItem("tasks")),l.forEach((t=>{u(t)}))),localStorage.getItem("tasksDone")&&(c=JSON.parse(localStorage.getItem("tasksDone")),c.forEach((t=>{u(t)}))),function(){const t=new Date;e.textContent=`${["January","February","March","April","May","June","July","August","September","October","November","December"][t.getMonth()]} ${t.getDate()}, ${t.getFullYear()}`}(),d(),n.addEventListener("click",(()=>{const t={id:Date.now(),title:"",category:"",status:""};u(t),l.push(t),i.querySelector(".task-title").focus(),d(),f()})),o.addEventListener("click",(()=>{r.querySelectorAll(".task").forEach((t=>{t.remove()})),c=[],d(),f()})),a.addEventListener("click",(t=>{t.target.classList.contains("task-checkbox")&&function(t){const e=t,s=Number(e.id);if(t.classList.contains("task-done")){const e=c.findIndex((t=>t.id===Number(s)));console.log(e),c[e].status="",l.push(c[e]),c=c.filter((t=>t.id!==c[e].id)),i.insertAdjacentElement("afterbegin",t)}else{const e=l.findIndex((t=>t.id===Number(s)));l[e].status="done",c.push(l[e]),l=l.filter((t=>t.id!==l[e].id)),r.insertAdjacentElement("afterbegin",t)}g(e),d(),f()}(t.target.closest(".task"))}))}();