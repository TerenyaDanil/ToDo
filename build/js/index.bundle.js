!function(){const t=document.querySelector("body"),e=document.querySelector(".todo"),s=e.querySelector(".date-title"),n=e.querySelector(".status-title"),o=e.querySelector(".add-btn"),a=e.querySelector(".dark-theme-btn"),r=e.querySelector(".clear-done-tasks"),i=e.querySelector(".tasks-container"),l=e.querySelector(".list-tasks-incompleted"),c=e.querySelector(".list-tasks-completed");let d=[],u=[];function g(){t.classList.toggle("dark")}function k(){const t=document.querySelectorAll(".list-tasks-completed .task"),e=document.querySelectorAll(".list-tasks-incompleted .task");n.textContent=`${e.length} incomplete, ${t.length} completed`}function m(t){const e=`\n      <div id="${t.id}" class="task mt-4 flex items-start transition first:mt-0 opacity-0 -translate-x-4">\n        <div class="task-checkbox mt-0.5 flex h-6 w-6 cursor-pointer items-center justify-center rounded-md border-2 border-gray-200">\n          <svg class="pointer-events-none opacity-0 transition" width="10" height="10" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">\n            <path class="dark:stroke-gray-300" d="M1 6L3.91667 9L9 1" stroke="#575767" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />\n          </svg>\n        </div>\n        <div class="task-deskription ml-4 flex w-full flex-col">\n          <input value="${t.title}" placeholder="Task" data-deskription="title" class="task-title bg-transparent text-lg font-medium text-[#575767] focus-visible:outline-none dark:text-gray-300" />\n          <input value="${t.category}" placeholder="Category" data-deskription="category" class="task-сategory mt-1 bg-transparent font-semibold text-[#B9B9BE] focus-visible:outline-none dark:text-gray-300" />\n        </div>\n      </div>\n    `;"done"===t.status?c.insertAdjacentHTML("afterbegin",e):l.insertAdjacentHTML("afterbegin",e);const s=i.querySelector(`[id="${t.id}"]`);s.querySelectorAll("input[data-deskription]").forEach((t=>{t.addEventListener("input",f)})),"done"===t.status&&y(s),setTimeout((()=>{s.classList.remove("opacity-0"),s.classList.remove("-translate-x-4")}),100)}function y(t){const e=t.querySelector(".task-deskription"),s=t.querySelector(".task-checkbox svg");t.classList.toggle("task-done"),s.classList.toggle("opacity-0"),e.classList.toggle("opacity-50"),e.classList.toggle("pointer-events-none")}function f(){const t=this.closest(".task").id,e=d.findIndex((e=>e.id===Number(t))),s=this.dataset.deskription;d[e][s]=this.value,p()}function p(){localStorage.setItem("tasks",JSON.stringify(d)),localStorage.setItem("tasksDone",JSON.stringify(u))}localStorage.getItem("tasks")&&(d=JSON.parse(localStorage.getItem("tasks")),d.forEach((t=>{m(t)}))),localStorage.getItem("tasksDone")&&(u=JSON.parse(localStorage.getItem("tasksDone")),u.forEach((t=>{m(t)}))),window.matchMedia("(prefers-color-scheme: dark)").matches&&g(),function(){const t=new Date;s.textContent=`${["January","February","March","April","May","June","July","August","September","October","November","December"][t.getMonth()]} ${t.getDate()}, ${t.getFullYear()}`}(),k(),o.addEventListener("click",(()=>{const t={id:Date.now(),title:"",category:"",status:""};m(t),d.push(t),l.querySelector(".task-title").focus(),k(),p()})),a.addEventListener("click",g),r.addEventListener("click",(()=>{c.querySelectorAll(".task").forEach((t=>{t.remove()})),u=[],k(),p()})),i.addEventListener("click",(t=>{t.target.classList.contains("task-checkbox")&&function(t){const e=t,s=Number(e.id);if(t.classList.contains("task-done")){const e=u.findIndex((t=>t.id===Number(s)));console.log(e),u[e].status="",d.push(u[e]),u=u.filter((t=>t.id!==u[e].id)),l.insertAdjacentElement("afterbegin",t)}else{const e=d.findIndex((t=>t.id===Number(s)));d[e].status="done",u.push(d[e]),d=d.filter((t=>t.id!==d[e].id)),c.insertAdjacentElement("afterbegin",t)}y(e),k(),p()}(t.target.closest(".task"))}))}();